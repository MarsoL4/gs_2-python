# ================================ Imports ================================ 
import oracledb
import json
import pandas as pd
from datetime import datetime
import os


# ============================== Subalgoritmos ============================

# Limpa o terminal para uma exibi√ß√£o mais limpa
def limpar_terminal() -> None:
    # Determina o comando para limpar o terminal dependendo do sistema operacional
    os.system("cls" if os.name == "nt" else "clear")

# Estabelece conex√£o com o Banco de Dados
def conectarBD() -> oracledb.Connection | None:
    try:
        # Conecta ao banco de dados usando as credenciais fornecidas
        conn = oracledb.connect(
            user="SEU USU√ÅRIO",
            password="SUA SENHA",
            dsn="(DESCRIPTION=(ADDRESS=(PROTOCOL= SEU PROTOCOL)(HOST= SEU HOST)(PORT= SEU PORT))(CONNECT_DATA=(SID= SEU SID)))",
        )
        return conn  # Retorna a conex√£o ativa
    except oracledb.Error as e:
        # Exibe mensagem de erro caso a conex√£o falhe
        print(f"\nüî¥ Erro ao conectar ao banco de dados: {e}")
        return None

# Encerra a conex√£o com o banco de dados
def fechar_conexao(conexao: oracledb.Connection) -> None:
    if conexao:
        conexao.close()  # Fecha a conex√£o com o Banco de Dados

# Lista as op√ß√µes de uma tabela do banco de dados com mensagens personalizadas
def listar_opcoes(tabela: str, campo_id: str, campo_nome: str) -> int | None:
    try:
        conexao = conectarBD()  # Abre uma conex√£o com o banco
        if not conexao:
            return None
        cursor = conexao.cursor()

        # Monta e executa a query para buscar os dados da tabela
        query = f"SELECT {campo_id}, {campo_nome} FROM {tabela}"
        cursor.execute(query)
        resultados = cursor.fetchall()  # Armazena os resultados

        if resultados:
            # Define t√≠tulos amig√°veis ao usu√°rio
            if tabela == "TBL_TIPO_FONTES":
                print("\n=== Selecione o tipo de fonte ===")
            elif tabela == "TBL_REGIOES_SUSTENTAVEIS":
                print("\n=== Selecione a regi√£o sustent√°vel ===")
            else:
                print(f"\n=== Op√ß√µes dispon√≠veis em {tabela} ===")

            # Exibe os resultados formatados como op√ß√µes para o usu√°rio
            for index, linha in enumerate(resultados, start=1):
                print(f"{index}. {linha[1]}")

            # Solicita que o usu√°rio escolha uma op√ß√£o v√°lida
            while True:
                try:
                    escolha = int(input(f"Escolha uma op√ß√£o (1 a {len(resultados)}): "))
                    if 1 <= escolha <= len(resultados):
                        return resultados[escolha - 1][0]  # Retorna o ID da op√ß√£o escolhida
                    else:
                        print("üî¥ Op√ß√£o inv√°lida. Tente novamente.")
                except ValueError:
                    print("üî¥ Entrada inv√°lida. Por favor, insira um n√∫mero.")
        else:
            # Caso nenhum dado seja encontrado na tabela
            print(f"üî¥ Nenhum dado encontrado na tabela {tabela}.")
            return None
    except Exception as e:
        # Captura e exibe mensagens de erro durante a execu√ß√£o
        print(f"\nüî¥ Erro ao listar op√ß√µes na tabela {tabela}: {e}")
        return None
    finally:
        fechar_conexao(conexao)  # Fecha a conex√£o com o Banco de Dados

# Valida n√∫meros positivos
def validar_numero_positivo(valor: str, nome_campo: str) -> float:
    while True:
        try:
            numero = float(valor)  # Tenta converter o valor para float
            if numero <= 0:
                raise ValueError(f"O campo '{nome_campo}' deve ser um n√∫mero positivo.")  # Valida se √© positivo
            return numero  # Retorna o n√∫mero validado
        except ValueError as e:
            # Exibe erro e solicita nova entrada do usu√°rio
            print(f"\nüî¥ {e}")
            valor = input(f"Insira novamente o campo '{nome_campo}': ")

# Valida strings n√£o vazias
def validar_string_nao_vazia(valor: str, nome_campo: str) -> str:
    while True:
        if not valor.strip():  # Verifica se a string est√° vazia ou cont√©m apenas espa√ßos
            print(f"üî¥ O campo '{nome_campo}' n√£o pode estar vazio.")
            valor = input(f"Insira novamente o campo '{nome_campo}': ")  # Solicita uma nova entrada
        else:
            return valor.strip()  # Retorna a string validada sem espa√ßos em branco

# Insere um novo projeto no Banco de Dados
def inserir_projeto() -> None:
    try:
        limpar_terminal()  # Limpa o terminal antes de exibir o menu
        print("\n=== Cadastrando um novo projeto ===")
        conexao = conectarBD()  # Estabelece conex√£o com o banco
        if not conexao:
            return
        cursor = conexao.cursor()

        # Coleta e valida as informa√ß√µes do projeto
        descricao = validar_string_nao_vazia(input("Descri√ß√£o do projeto: "), "Descri√ß√£o")
        custo = validar_numero_positivo(input("Custo do projeto: "), "Custo")

        # Menu para selecionar o status do projeto
        print("\n=== Escolha o status do projeto ===")
        print("1. Em andamento")
        print("2. Conclu√≠do")
        while True:
            status_opcao = input("Escolha uma op√ß√£o (1-2): ").strip()
            if status_opcao == "1":
                status = "Em andamento"  # Define o status como "Em andamento"
                break
            elif status_opcao == "2":
                status = "Conclu√≠do"  # Define o status como "Conclu√≠do"
                break
            else:
                print("üî¥ Op√ß√£o inv√°lida. Tente novamente.")  # Solicita uma escolha v√°lida

        # Lista op√ß√µes para tipo de fonte e regi√£o
        id_tipo_fonte = listar_opcoes("TBL_TIPO_FONTES", "ID_TIPO_FONTE", "NOME")
        id_regiao = listar_opcoes("TBL_REGIOES_SUSTENTAVEIS", "ID_REGIAO", "NOME")

        # Cancela a opera√ß√£o se n√£o conseguir selecionar as op√ß√µes
        if id_tipo_fonte is None or id_regiao is None:
            print("üî¥ Opera√ß√£o cancelada devido a falha na sele√ß√£o de dados.")
            return

        # Insere os dados do projeto no banco de dados
        query = """
            INSERT INTO TBL_PROJETOS_SUSTENTAVEIS 
            (DESCRICAO, CUSTO, STATUS, ID_TIPO_FONTE, ID_REGIAO)
            VALUES (:descricao, :custo, :status, :id_tipo_fonte, :id_regiao)
        """
        cursor.execute(
            query,
            {
                "descricao": descricao,
                "custo": custo,
                "status": status,
                "id_tipo_fonte": id_tipo_fonte,
                "id_regiao": id_regiao,
            },
        )
        conexao.commit()  # Confirma as altera√ß√µes no banco
        print("\nüü¢ Projeto inserido com sucesso!")
    except Exception as e:
        # Mensagem de erro em caso de falha
        print(f"\nüî¥ Erro ao inserir projeto: {e}")
    finally:
        fechar_conexao(conexao)  # Fecha a conex√£o com o Banco de Dados
        input("\nPressione Enter para continuar...")
        
# Atualiza um projeto existente no Banco de Dados
def atualizar_projeto() -> None:
    try:
        limpar_terminal()  # Limpa o terminal para exibi√ß√£o organizada
        print("\n=== Atualizando um projeto ===")
        conexao = conectarBD()  # Conecta ao banco de dados
        if not conexao:
            return
        cursor = conexao.cursor()

        # Solicita o ID do projeto a ser atualizado
        id_projeto = validar_numero_positivo(input("ID do projeto a ser atualizado: "), "ID do Projeto")

        # Consulta informa√ß√µes atuais do projeto
        consulta = """
            SELECT 
                p.ID_PROJETO, 
                p.DESCRICAO, 
                p.CUSTO, 
                p.STATUS, 
                p.ID_TIPO_FONTE, 
                tf.NOME AS TIPO_FONTE, 
                p.ID_REGIAO, 
                r.NOME AS REGIAO
            FROM RM556310.TBL_PROJETOS_SUSTENTAVEIS p
            JOIN TBL_TIPO_FONTES tf ON p.ID_TIPO_FONTE = tf.ID_TIPO_FONTE
            JOIN TBL_REGIOES_SUSTENTAVEIS r ON p.ID_REGIAO = r.ID_REGIAO
            WHERE p.ID_PROJETO = :id_projeto
        """
        cursor.execute(consulta, {"id_projeto": id_projeto})
        resultado = cursor.fetchone()

        if not resultado:  # Verifica se o projeto foi encontrado
            print("\nüî¥ Projeto com o ID informado n√£o encontrado.")
            input("\nPressione Enter para continuar...")
            return

        # Carrega os dados do projeto
        projeto_atual = {
            "ID_PROJETO": resultado[0],
            "DESCRICAO": resultado[1],
            "CUSTO": resultado[2],
            "STATUS": resultado[3],
            "ID_TIPO_FONTE": resultado[4],
            "TIPO_FONTE": resultado[5],
            "ID_REGIAO": resultado[6],
            "REGIAO": resultado[7],
        }

        # Clona os dados originais para verificar altera√ß√µes posteriormente
        projeto_inicial = projeto_atual.copy()

        while True:
            limpar_terminal()  # Limpa o terminal para exibi√ß√£o organizada
            print("\n=== Informa√ß√µes atuais do projeto ===")
            # Exibe os dados do projeto no formato correto
            print(f"ID: {projeto_atual['ID_PROJETO']}")
            print(f"Descri√ß√£o: {projeto_atual['DESCRICAO']}")
            print(f"Custo: R${projeto_atual['CUSTO']:,.2f}")
            print(f"Status: {projeto_atual['STATUS']}")
            print(f"Tipo de Fonte ID: {projeto_atual['ID_TIPO_FONTE']} ({projeto_atual['TIPO_FONTE']})")
            print(f"Regi√£o ID: {projeto_atual['ID_REGIAO']} ({projeto_atual['REGIAO']})")

            # Menu de op√ß√µes para atualizar os campos
            print("\n=== Escolha o campo que deseja modificar ===")
            print("1. Descri√ß√£o")
            print("2. Custo")
            print("3. Status")
            print("4. Tipo de Fonte")
            print("5. Regi√£o")
            print("6. Voltar ao menu principal")

            opcao = input("Escolha uma op√ß√£o (1-6): ").strip()

            if opcao == "1":
                # Atualizar descri√ß√£o
                descricao = input("\nNova descri√ß√£o do projeto: ").strip()
                if descricao:
                    projeto_atual["DESCRICAO"] = descricao
                    print("\nüü¢ Descri√ß√£o atualizada com sucesso!")
                else:
                    print("\nüî¥ A descri√ß√£o n√£o pode ser vazia.")

            elif opcao == "2":
                # Atualizar custo
                custo = input("\nNovo custo do projeto: ").strip()
                if custo:
                    try:
                        projeto_atual["CUSTO"] = float(custo)
                        print("\nüü¢ Custo atualizado com sucesso!")
                    except ValueError:
                        print("\nüî¥ O custo deve ser um n√∫mero v√°lido.")
                else:
                    print("\nüî¥ O custo n√£o pode ser vazio.")

            elif opcao == "3":
                # Atualizar status
                print("\n=== Escolha o novo status do projeto ===")
                print("1. Em andamento")
                print("2. Conclu√≠do")
                while True:
                    status_opcao = input("Escolha uma op√ß√£o (1-2): ").strip()
                    if status_opcao == "1":
                        projeto_atual["STATUS"] = "Em andamento"
                        print("\nüü¢ Status atualizado para 'Em andamento'.")
                        break
                    elif status_opcao == "2":
                        projeto_atual["STATUS"] = "Conclu√≠do"
                        print("\nüü¢ Status atualizado para 'Conclu√≠do'.")
                        break
                    else:
                        print("üî¥ Op√ß√£o inv√°lida. Tente novamente.")

            elif opcao == "4":
                # Atualizar tipo de fonte
                print("\n=== Escolha o novo tipo de fonte ===")
                id_tipo_fonte = listar_opcoes("TBL_TIPO_FONTES", "ID_TIPO_FONTE", "NOME")
                if id_tipo_fonte is not None:
                    projeto_atual["ID_TIPO_FONTE"] = id_tipo_fonte
                    consulta_tipo = """
                        SELECT NOME FROM TBL_TIPO_FONTES WHERE ID_TIPO_FONTE = :id_tipo_fonte
                    """
                    cursor.execute(consulta_tipo, {"id_tipo_fonte": id_tipo_fonte})
                    novo_tipo = cursor.fetchone()
                    projeto_atual["TIPO_FONTE"] = novo_tipo[0] if novo_tipo else "Desconhecido"
                    print("\nüü¢ Tipo de fonte atualizado com sucesso!")

            elif opcao == "5":
                # Atualizar regi√£o
                print("\n=== Escolha a nova regi√£o do projeto ===")
                id_regiao = listar_opcoes("TBL_REGIOES_SUSTENTAVEIS", "ID_REGIAO", "NOME")
                if id_regiao is not None:
                    projeto_atual["ID_REGIAO"] = id_regiao
                    consulta_regiao = """
                        SELECT NOME FROM TBL_REGIOES_SUSTENTAVEIS WHERE ID_REGIAO = :id_regiao
                    """
                    cursor.execute(consulta_regiao, {"id_regiao": id_regiao})
                    nova_regiao = cursor.fetchone()
                    projeto_atual["REGIAO"] = nova_regiao[0] if nova_regiao else "Desconhecida"
                    print("\nüü¢ Regi√£o atualizada com sucesso!")

            elif opcao == "6":
                # Salva as altera√ß√µes no banco de dados e encerra
                if projeto_atual != projeto_inicial:
                    query = """
                        UPDATE TBL_PROJETOS_SUSTENTAVEIS
                        SET DESCRICAO = :descricao, CUSTO = :custo, STATUS = :status, 
                            ID_TIPO_FONTE = :id_tipo_fonte, ID_REGIAO = :id_regiao
                        WHERE ID_PROJETO = :id_projeto
                    """
                    cursor.execute(
                        query,
                        {
                            "descricao": projeto_atual["DESCRICAO"],
                            "custo": projeto_atual["CUSTO"],
                            "status": projeto_atual["STATUS"],
                            "id_tipo_fonte": projeto_atual["ID_TIPO_FONTE"],
                            "id_regiao": projeto_atual["ID_REGIAO"],
                            "id_projeto": projeto_atual["ID_PROJETO"],
                        },
                    )
                    conexao.commit()
                    print("\nüü¢ Projeto atualizado com sucesso!")
                else:
                    print("\nüîµ Nenhuma altera√ß√£o foi realizada.")
                input("\nPressione Enter para continuar...")
                break
            else:
                print("\nüî¥ Op√ß√£o inv√°lida. Tente novamente.")

            # Pergunta se o usu√°rio deseja alterar mais campos
            alterar_mais = input("\nDeseja modificar mais algum campo? (s/n): ").strip().lower()
            if alterar_mais != "s":
                if projeto_atual != projeto_inicial:
                    # Salva altera√ß√µes
                    query = """
                        UPDATE TBL_PROJETOS_SUSTENTAVEIS
                        SET DESCRICAO = :descricao, CUSTO = :custo, STATUS = :status, 
                            ID_TIPO_FONTE = :id_tipo_fonte, ID_REGIAO = :id_regiao
                        WHERE ID_PROJETO = :id_projeto
                    """
                    cursor.execute(
                        query,
                        {
                            "descricao": projeto_atual["DESCRICAO"],
                            "custo": projeto_atual["CUSTO"],
                            "status": projeto_atual["STATUS"],
                            "id_tipo_fonte": projeto_atual["ID_TIPO_FONTE"],
                            "id_regiao": projeto_atual["ID_REGIAO"],
                            "id_projeto": projeto_atual["ID_PROJETO"],
                        },
                    )
                    conexao.commit()
                    print("\nüü¢ Todas as altera√ß√µes foram salvas com sucesso!")
                else:
                    print("\nüîµ Nenhuma altera√ß√£o foi realizada.")
                input("\nPressione Enter para continuar...")
                break

    except Exception as e:
        # Mensagem de erro em caso de falha
        print(f"\nüî¥ Erro ao atualizar projeto: {e}")
        input("\nPressione Enter para continuar...")
    finally:
        fechar_conexao(conexao)  # Fecha a conex√£o com o Banco de Dados

# Exclui um projeto existente do Banco de Dados
def excluir_projeto() -> None:
    try:
        limpar_terminal()  # Limpa o terminal para exibi√ß√£o organizada
        print("\n=== Excluindo um projeto ===")
        conexao = conectarBD()  # Estabelece conex√£o com o banco de dados
        if not conexao:
            return
        cursor = conexao.cursor()

        # Solicita o ID do projeto a ser exclu√≠do
        id_projeto = validar_numero_positivo(input("ID do projeto a ser exclu√≠do: "), "ID do Projeto")

        # Consulta as informa√ß√µes do projeto para confirmar exclus√£o
        consulta = "SELECT DESCRICAO, CUSTO, STATUS FROM TBL_PROJETOS_SUSTENTAVEIS WHERE ID_PROJETO = :id_projeto"
        cursor.execute(consulta, {"id_projeto": id_projeto})
        projeto = cursor.fetchone()

        if not projeto:  # Verifica se o projeto foi encontrado
            print("\nüî¥ Projeto com o ID informado n√£o encontrado.")
            return

        # Exibe os detalhes do projeto antes de confirmar exclus√£o
        print("\n=== Informa√ß√µes do Projeto ===")
        print(f"Descri√ß√£o: {projeto[0]}")
        print(f"Custo: R${projeto[1]:,.2f}")
        print(f"Status: {projeto[2]}")
        print("\nTem certeza que deseja excluir este projeto? (sim/n√£o)")
        
        confirmacao = input("Digite sua escolha: ").strip().lower()
        if confirmacao != "sim":
            print("\nüî¥ Exclus√£o cancelada pelo usu√°rio.")  # Cancela exclus√£o se n√£o confirmado
            return

        # Realiza a exclus√£o do projeto no banco de dados
        query = "DELETE FROM TBL_PROJETOS_SUSTENTAVEIS WHERE ID_PROJETO = :id_projeto"
        cursor.execute(query, {"id_projeto": id_projeto})
        conexao.commit()  # Salva a exclus√£o
        print("\nüü¢ Projeto exclu√≠do com sucesso!")
    except Exception as e:
        # Exibe mensagem de erro em caso de falha
        print(f"\nüî¥ Erro ao excluir projeto: {e}")
    finally:
        fechar_conexao(conexao)  # Fecha a conex√£o com o Banco de Dados
        input("\nPressione Enter para continuar...")

# Consulta os projetos existentes no Banco de Dados
def consultar_projetos(export: bool = False) -> list:
    try:
        if export:
            print("\n=== Selecione os projetos que deseja exportar ===")
        else:
            limpar_terminal()  # Limpa o terminal para exibi√ß√£o organizada
            print("\n=== Consultando projetos ===")
        
        # Menu de filtro para a consulta de projetos
        print("1. Todos os projetos")
        print("2. Apenas os projetos em andamento")
        print("3. Apenas os projetos conclu√≠dos")

        escolha = input("Escolha uma op√ß√£o (1-3): ").strip()
        if escolha not in ["1", "2", "3"]:
            print("\nüî¥ Op√ß√£o inv√°lida.")  # Retorna se a escolha for inv√°lida
            return []

        # Monta a consulta SQL com base na escolha do usu√°rio
        consulta = """
            SELECT 
                p.ID_PROJETO, 
                p.DESCRICAO, 
                p.CUSTO, 
                p.STATUS, 
                tf.ID_TIPO_FONTE, 
                tf.NOME AS TIPO_FONTE, 
                r.ID_REGIAO, 
                r.NOME AS REGIAO
            FROM RM556310.TBL_PROJETOS_SUSTENTAVEIS p
            JOIN TBL_TIPO_FONTES tf ON p.ID_TIPO_FONTE = tf.ID_TIPO_FONTE
            JOIN TBL_REGIOES_SUSTENTAVEIS r ON p.ID_REGIAO = r.ID_REGIAO
        """
        if escolha == "2":
            consulta += " WHERE p.STATUS = 'Em andamento'"  # Filtra projetos em andamento
        elif escolha == "3":
            consulta += " WHERE p.STATUS = 'Conclu√≠do'"  # Filtra projetos conclu√≠dos

        conexao = conectarBD()  # Conecta ao banco de dados
        if not conexao:
            return []
        cursor = conexao.cursor()
        cursor.execute(consulta)

        resultados = cursor.fetchall()  # Armazena os resultados da consulta
        if not resultados:
            print("\nüî¥ Nenhum projeto encontrado.")  # Exibe mensagem se n√£o houver resultados
        else:
            if export:
                print("\n=== Projetos que ser√£o exportados ===")
            # Exibe os resultados da consulta
            for projeto in resultados:
                print(
                    f"\nID: {projeto[0]} | Descri√ß√£o: {projeto[1]} | "
                    f"Custo: R${projeto[2]:,.2f} | Status: {projeto[3]} | "
                    f"Tipo de Fonte ID: {projeto[4]} ({projeto[5]}) | Regi√£o ID: {projeto[6]} ({projeto[7]})"
                )

        if not export:
            input("\nPressione Enter para continuar...")  # Pausa para visualiza√ß√£o dos resultados

        return resultados  # Retorna a lista de resultados
    finally:
        fechar_conexao(conexao)  # Fecha a conex√£o com o Banco de Dados

# Exporta projetos selecionados para um arquivo JSON
def exportar_json(dados: list, nome_arquivo: str = None) -> None:
    try:
        if not nome_arquivo:
            hoje = datetime.now().strftime("%Y-%m-%d")  # Gera um nome padr√£o para o arquivo
            nome_arquivo = f"projetos_{hoje}.json"

        # Transforma os dados em formato JSON
        if isinstance(dados, list) and all(isinstance(item, (list, tuple)) for item in dados):
            dados = [
                {
                    "ID_PROJETO": item[0],
                    "DESCRICAO": item[1],
                    "CUSTO": item[2],
                    "STATUS": item[3],
                    "ID_TIPO_FONTE": item[4],  # Apenas o ID
                    "ID_REGIAO": item[6]  # Apenas o ID
                }
                for item in dados
            ]

        # Escreve os dados em um arquivo JSON
        with open(nome_arquivo, "w", encoding="utf-8") as arquivo:
            json.dump(dados, arquivo, indent=4, ensure_ascii=False)
        print(f"\nüü¢ Dados exportados para o arquivo: {nome_arquivo}")
    except Exception as e:
        # Exibe mensagem de erro caso a exporta√ß√£o falhe
        print(f"\nüî¥ Erro ao exportar para JSON: {e}")
    input("\nPressione Enter para continuar...")  # Pausa para visualiza√ß√£o da mensagem

# Exporta projetos selecionados para um arquivo Excel (.xlsx)
def exportar_DataFrame(dados: list, nome_arquivo: str = None) -> None:
    try:
        if not nome_arquivo:
            hoje = datetime.now().strftime("%Y-%m-%d")  # Gera um nome padr√£o para o arquivo
            nome_arquivo = f"projetos_{hoje}.xlsx"

        # Converte os dados para um DataFrame do pandas
        df = pd.DataFrame(
            [
                {
                    "ID_PROJETO": item[0],
                    "DESCRICAO": item[1],
                    "CUSTO": item[2],
                    "STATUS": item[3],
                    "ID_TIPO_FONTE": item[4],  # Apenas o ID
                    "ID_REGIAO": item[6]  # Apenas o ID
                }
                for item in dados
            ]
        )

        # Exporta o DataFrame para um arquivo Excel
        df.to_excel(nome_arquivo, index=False, engine="openpyxl")
        print(f"\nüü¢ Dados exportados para o arquivo: {nome_arquivo}")
    except ModuleNotFoundError:
        # Mensagem caso a biblioteca necess√°ria n√£o esteja instalada
        print("\nüî¥ O m√≥dulo 'openpyxl' n√£o est√° instalado. Por favor, instale-o usando 'pip install openpyxl'.")
    except Exception as e:
        # Exibe mensagem de erro caso a exporta√ß√£o falhe
        print(f"\nüî¥ Erro ao exportar para Excel: {e}")
    input("\nPressione Enter para continuar...")  # Pausa para visualiza√ß√£o

# Exibe o menu principal
def exibir_menu() -> None:
    limpar_terminal()  # Limpa o terminal antes de exibir o menu
    print("\n=== MENU PRINCIPAL ===")
    # Op√ß√µes dispon√≠veis no sistema
    print("1. Cadastrar novo Projeto")
    print("2. Atualizar Projeto Existente")
    print("3. Excluir Projeto pelo ID")
    print("4. Consultar Projetos pelo status")
    print("5. Exportar Projetos para JSON ou DataFrame")
    print("6. Sair")

# Fun√ß√£o principal que controla o fluxo do programa
def main() -> None:
    while True:
        exibir_menu()  # Exibe o menu principal
        opcao = input("Escolha uma op√ß√£o: ")  # Solicita a escolha do usu√°rio
        if opcao == "1":
            inserir_projeto()  # Chama a fun√ß√£o para cadastrar um projeto
        elif opcao == "2":
            atualizar_projeto()  # Chama a fun√ß√£o para atualizar um projeto
        elif opcao == "3":
            excluir_projeto()  # Chama a fun√ß√£o para excluir um projeto
        elif opcao == "4":
            consultar_projetos()  # Chama a fun√ß√£o para consultar projetos
        elif opcao == "5":
            # Realiza a exporta√ß√£o de projetos
            projects = consultar_projetos(export=True)
            if projects:
                while True:
                    print("\n=== Exportar Dados ===")
                    print("1. Exportar para JSON")
                    print("2. Exportar para Excel")
                    export_opcao = input("Escolha uma op√ß√£o (1-2): ").strip()
                    if export_opcao == "1":
                        exportar_json(projects)  # Exporta para JSON
                        break
                    elif export_opcao == "2":
                        exportar_DataFrame(projects)  # Exporta para Excel
                        break
                    else:
                        print("üî¥ Op√ß√£o inv√°lida. Tente novamente.")
            else:
                print("üî¥ Nenhum dado dispon√≠vel para exporta√ß√£o.")
        elif opcao == "6":
            # Finaliza o sistema
            print("\nüü¢ Saindo do sistema...")
            break
        else:
            # Mensagem para op√ß√µes inv√°lidas
            print("\nüî¥ Op√ß√£o inv√°lida. Tente novamente.")
            input("\nPressione Enter para continuar...")

# Executa a fun√ß√£o principal
main()
